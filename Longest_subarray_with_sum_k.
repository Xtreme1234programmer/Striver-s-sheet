//Brute Force Approach TC-->O(N*N)  SC-->O(1)
class Solution {
    // Function for finding maximum and value pair
    public static int lenOfLongSubarr(int A[], int N, int K) {
        // Complete the function
        int len=0;
        for(int i=0;i<N;i++)
        {
            int sum=0;
            for(int j=i;j<N;j++)
            {
                sum+=A[j];
                if(sum==K)
                {
                    len=Math.max(len,j-i+1);
                }
            }
        }
        return len;
       
    }
}

//Optimal approach  TC-->O(NLOGN)  SC-->0(N)
class Solution {
    // Function for finding maximum and value pair
    public static int lenOfLongSubarr(int A[], int N, int K) {
        // Complete the function
        int sum=0;
        int maxLength=0;
        Map<Integer,Integer> mpp=new HashMap<>();
        for(int i=0;i<N;i++)
        {
            sum+=A[i];
            if(sum==K)
            {
                maxLength=Math.max(maxLength,i+1);
            }
            
            int rem=sum-K;
            
            if(mpp.containsKey(rem))
            {
                int len=i-mpp.get(rem);
               maxLength=Math.max(maxLength,len);
            }
            
            if(!mpp.containsKey(sum))
            {
                mpp.put(sum,i);
            }
        }
        return maxLength;
        
    }
}
